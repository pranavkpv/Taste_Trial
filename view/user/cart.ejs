<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
  :root {
      --primary-color: #4f46e5;
      --success-color: #10b981;
      --danger-color: #ef4444;
      --warning-color: #f59e0b;
      --light-bg: #f9fafb;
  }

  body {
      background-color: var(--light-bg);
      overflow-x: hidden;
  }

  .cart-header {
      background: linear-gradient(135deg, var(--primary-color), #818cf8);
      color: white;
      padding: 2rem;
      border-radius: 15px;
      margin-bottom: 2rem;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }

  .cart-container {
      padding: 2rem;
      background: white;
      border-radius: 15px;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }

  .cart-table {
      border-radius: 10px;
      overflow: hidden;
      margin-top: 2rem;
  }

  .table {
      margin-bottom: 0;
  }

  .table thead {
      background: var(--primary-color);
      color: white;
  }

  .table th {
      padding: 1rem;
      font-weight: 500;
      border: none;
      white-space: nowrap;
  }

  .table td {
      padding: 1rem;
      vertical-align: middle;
      border-bottom: 1px solid #e5e7eb;
  }

  .product-img {
      width: 80px;
      height: 80px;
      object-fit: cover;
      border-radius: 8px;
      transition: transform 0.3s ease;
  }

  .product-img:hover {
      transform: scale(1.1);
  }

  .form-check-input {
      width: 1.2rem;
      height: 1.2rem;
      cursor: pointer;
  }

  .quantity-controls {
      display: flex;
      align-items: center;
      gap: 0.5rem;
  }

  .quantity-btn {
      width: 30px;
      height: 30px;
      border-radius: 6px;
      border: none;
      background: var(--light-bg);
      color: var(--primary-color);
      font-weight: bold;
      transition: all 0.3s ease;
  }

  .quantity-btn:hover {
      background: var(--primary-color);
      color: white;
  }

  .quantity {
      font-weight: 500;
      padding: 0.5rem 1rem;
      background: var(--light-bg);
      border-radius: 6px;
  }

  .btn-remove {
      padding: 0.5rem 1rem;
      border-radius: 6px;
      transition: all 0.3s ease;
  }

  .stock-badge {
      padding: 0.25rem 0.75rem;
      border-radius: 20px;
      font-size: 0.875rem;
      background: #fee2e2;
      color: var(--danger-color);
  }

  .total-row {
      background: #f8fafc;
      font-weight: 500;
  }

  .subtotal {
      font-size: 1.1rem;
      color: var(--primary-color);
      font-weight: bold;
  }

  .btn-proceed {
      background: var(--primary-color);
      color: white;
      padding: 0.75rem 1.5rem;
      border-radius: 8px;
      transition: all 0.3s ease;
  }

  .btn-proceed:hover {
      background: #4338ca;
      transform: translateY(-2px);
  }

  .pagination {
      margin-top: 2rem;
      display: flex;
      justify-content: center;
      gap: 0.5rem;
  }

  .page-btn {
      width: 40px;
      height: 40px;
      border-radius: 8px;
      border: none;
      background: white;
      color: var(--primary-color);
      transition: all 0.3s ease;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .page-btn.active {
      background: var(--primary-color);
      color: white;
  }

  .empty-cart {
      text-align: center;
      padding: 3rem;
      color: #6b7280;
  }
  .nav-links a.cart {
      background: #34495e;
      border-left: 3px solid #3498db;
  }
</style>
<%- include('partials/userheader') %>

<div class="row">
  <div class="col-md-2 menu">
    <%- include('partials/profileside') %>
  </div>
  <div class="col-md-10">
    <div class="cart-header" style="margin-top:85px">
      <h2 class="mb-0">Your Shopping Cart</h2>
      <p class="mb-0 text-white-50">Manage your selected items</p>
    </div>

    <div class="cart-container">
      <div class="table-responsive cart-table">
        <table class="table">
          <thead>
            <tr>
              <th>
                <input type="checkbox" class="form-check-input" id="selectAll">
              </th>
              <th>Product</th>
              <th>Details</th>
              <th>Price</th>
              <th>Stock</th>
              <th>Quantity</th>
              <th>Total</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody>
            <% if (carts.length === 0) { %>
            <tr>
              <td colspan="8">
                <div class="empty-cart">
                  <i class="fas fa-shopping-cart fa-3x mb-3"></i>
                  <h4>Your cart is empty</h4>
                  <p>Add items to get started</p>
                </div>
              </td>
            </tr>
            <% } else { %>
            <% carts.forEach((element, index) => { %>
            <tr>
              <td>
                <input type="checkbox" class="form-check-input check-cart" data-index="<%= index %>"
                  data-id="<%= element._id %>">
              </td>
              <td>
                <img src="<%= element.rateDetails.images[0] %>" class="product-img"
                  alt="<%= element.foodDetails.foodname %>">
              </td>
              <td>
                <h6 class="mb-1"><%= element.foodDetails.foodname %></h6>
                <small class="text-muted">
                  <%= element.varientDetails[0].varientname %><br>
                  <%= element.hotelDetails[0].hotelname %>
                </small>
              </td>
              <td class="rateperunit">
                ₹ <%= element.rateDetails.rate %>
              </td>
              <td>
                <span class="stock-badge">
                  <%= element.rateDetails.stock %> left
                </span>
              </td>
              <td>
                <div class="quantity-controls">
                  <button class="quantity-btn decrease">-</button>
                  <span class="quantity"><%= element.number %></span>
                  <button class="quantity-btn increase">+</button>
                </div>
              </td>
              <td class="totalRate fw-bold">
                ₹ <%= totalAmount %>
              </td>
              <td>
                <button class="btn btn-danger btn-remove" data-bs-toggle="modal" data-bs-target="#removefromCart"
                  onclick="removefromCart('<%= element._id %>')">
                  <i class="fas fa-trash-alt"></i>
                </button>
              </td>
            </tr>
            <% }) %>

            <tr class="total-row">
              <td colspan="6" class="text-end">Total Amount:</td>
              <td class="subtotal">₹ <span id="total-amount">0</span></td>
              <td>
                <button class="btn btn-proceed" id="proceed">
                  Proceed <i class="fas fa-arrow-right ms-2"></i>
                </button>
              </td>
            </tr>
            <% } %>
          </tbody>
        </table>
      </div>

      <div class="pagination">
        <% for (let i = 1; i <= totalPages; i++) { %>
        <button class="page-btn <%= i === selectedpage ? 'active' : '' %>" onclick="loadPage('<%= i %>')">
          <%= i %>
        </button>
        <% } %>
      </div>
    </div>
  </div>


</div>

<!-- remove modal -->
<div class="modal fade" id="removefromCart" tabindex="-1" aria-labelledby="addBannerModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered custom-modal-width">
    <div class="modal-content">
      <form action="/user/removeCart" method="post">
        <input type="hidden" id="removeid" name="cartid">
        <div class="modal-body">
          <p>Do you want to Remove the product from cart?</p>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
          <button type="submit" class="btn btn-success">Yes</button>
        </div>
      </form>

    </div>
  </div>
</div>

<%- include('partials/userfooter') %>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>



  let debounceTimer;

  function searchItem(value) {
    clearTimeout(debounceTimer);
    debounceTimer = setTimeout(() => {
      const currentPage = 1; // Reset to the first page for a new search
      window.location.href = `/user/cart?pagenumber=${ currentPage }&product=${ encodeURIComponent(value) }`;
    }, 700); // Adjust delay (in milliseconds) as needed
  }

  function loadPage(pageNumber) {
    const searchValue = document.getElementById('searchInput').value || '';
    window.location.href = `/user/cart?pagenumber=${ pageNumber }&product=${ encodeURIComponent(searchValue) }`;
  }


  document.querySelectorAll('.increase, .decrease').forEach(button => {
    button.addEventListener('click', function () {
      const row = this.closest('tr');
      const quantityEl = row.querySelector('.quantity');
      let quantity = parseInt(quantityEl.textContent);

      if (this.classList.contains('increase')) {
        quantity++;
      } else if (this.classList.contains('decrease') && quantity > 1) {
        quantity--;
      }

      quantityEl.textContent = quantity;

      // Calculate the total rate for the row
      const ratePerUnit = parseFloat(row.querySelector('.rateperunit').innerText.replace('₹', '').trim());
      const totalRate = (ratePerUnit * quantity).toFixed(2);
      row.querySelector('.totalRate').innerText = `₹ ${ totalRate }`;

      updateTotalAmount(); // Update the total amount
    });
  });


  // Initial calculation for all rows on page load
  document.addEventListener('DOMContentLoaded', function () {
    const ratePerUnitElements = document.getElementsByClassName('rateperunit');
    const quantityElements = document.getElementsByClassName('quantity');
    const totalRateElements = document.getElementsByClassName('totalRate');

    for (let i = 0; i < ratePerUnitElements.length; i++) {
      const ratePerUnit = parseFloat(ratePerUnitElements[i].textContent.replace('₹', '').trim());
      const quantity = parseInt(quantityElements[i].textContent);
      const totalRate = ratePerUnit * quantity;

      totalRateElements[i].textContent = '₹ ' + totalRate.toFixed(2); // Initialize total rate with ₹ symbol
    }
  });




  document.getElementById('proceed').addEventListener('click', function (event) {
    event.preventDefault(); // Prevent form submission

    const selectedItems = [];
    let cartIDS = []
    let purchaseQty = []
    document.querySelectorAll('.check-cart').forEach((checkbox, index) => {
      if (checkbox.checked) {
        selectedItems.push(index); // Collect selected item indices (or any identifying data)
        cartIDS.push(checkbox.getAttribute('data-id'))
        purchaseQty.push(document.querySelectorAll('.quantity')[index].textContent)
      }
    });


    if (selectedItems.length === 0) {
      Swal.fire({
        icon: 'error',
        title: 'No Items Selected',
        text: 'Please select at least one item to proceed.',
      });
      return;
    }

    // Show confirmation alert
    Swal.fire({
      title: 'Confirm Your Order',
      text: 'Do you want to proceed with the selected items?',
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Yes, Proceed',
      cancelButtonText: 'Cancel',
    }).then((result) => {
      if (result.isConfirmed) {
        window.location.href = `/user/confirmorder?&cartIDS=${ cartIDS }&purchaseQty=${ purchaseQty }`;
      }
    });
  });



  document.addEventListener('DOMContentLoaded', function () {
    // Load selected items from local storage
    loadSelectedItems();

    const ratePerUnitElements = document.getElementsByClassName('rateperunit');
    const quantityElements = document.getElementsByClassName('quantity');
    const totalRateElements = document.getElementsByClassName('totalRate');

    // Initialize total rate for each item
    for (let i = 0; i < ratePerUnitElements.length; i++) {
      const ratePerUnit = parseFloat(ratePerUnitElements[i].textContent.replace('₹', '').trim());
      const quantity = parseInt(quantityElements[i].textContent);
      const totalRate = ratePerUnit * quantity;

      totalRateElements[i].textContent = '₹ ' + totalRate.toFixed(2); // Initialize total rate with ₹ symbol
    }

    // Update total amount based on selected items
    updateTotalAmount();

    // Initialize pagination and determine if the current page is the last one
    const itemsPerPage = 10;  // Example number of items per page
    const totalItems = document.querySelectorAll('.cart-item').length;  // Total number of items in cart
    const totalPages = Math.ceil(totalItems / itemsPerPage);  // Calculate total number of pages

    // Assuming you have a way to get the current page (this can be set dynamically)
    const currentPage = getCurrentPage(); // You can implement getCurrentPage() to fetch the current page

    // Show/hide the total amount row based on the current page
    if (currentPage === totalPages) {
      document.getElementById('total-row').style.display = 'table-row'; // Show total row on last page
    } else {
      document.getElementById('total-row').style.display = 'none'; // Hide total row on other pages
    }
  });

  // Event listener for checking/unchecking items
  document.querySelector('table').addEventListener('click', function (e) {
    const target = e.target;

    // Check if the clicked element is a checkbox
    if (target.classList.contains('check-cart')) {
      const index = target.getAttribute('data-index');
      const cartID = target.getAttribute('data-id');

      // Get current selections from local storage
      let selectedItems = JSON.parse(localStorage.getItem('selectedItems')) || [];

      // Add or remove the selected item from the array
      if (target.checked) {
        selectedItems.push(cartID);
      } else {
        selectedItems = selectedItems.filter(item => item !== cartID);
      }

      // Store updated selections in local storage
      localStorage.setItem('selectedItems', JSON.stringify(selectedItems));

      // Update total amount based on selected items
      updateTotalAmount();
    }
  });

  // Function to load previously selected items from local storage
  function loadSelectedItems() {
    const selectedItems = JSON.parse(localStorage.getItem('selectedItems')) || [];

    // Check each checkbox if it matches the stored selected items
    document.querySelectorAll('.check-cart').forEach((checkbox) => {
      if (selectedItems.includes(checkbox.getAttribute('data-id'))) {
        checkbox.checked = true;
      }
    });
  }

  // Function to calculate and update total amount for selected items
  function updateTotalAmount() {
    const selectedItems = JSON.parse(localStorage.getItem('selectedItems')) || {};
    let totalAmount = 0;

    document.querySelectorAll('.check-cart').forEach(checkbox => {
      if (checkbox.checked) {
        const row = checkbox.closest('tr');
        const itemTotal = parseFloat(row.querySelector('.totalRate').innerText.replace('₹', '').trim());
        totalAmount += itemTotal;
      }
    });

    document.getElementById('total-amount').innerText = totalAmount.toFixed(2); // Update UI
  }


  // Function to get the current page number (implement your own logic for pagination)
  function getCurrentPage() {
    // For example, this can be fetched from the URL or page state
    return parseInt(new URLSearchParams(window.location.search).get('page')) || 1; // Default to page 1 if not found
  }

  // Proceed with selected items (on button click)
  document.getElementById('proceed').addEventListener('click', function (event) {
    event.preventDefault(); // Prevent form submission

    const selectedItems = [];
    document.querySelectorAll('.check-cart').forEach((checkbox) => {
      if (checkbox.checked) {
        selectedItems.push(checkbox.getAttribute('data-id'));
      }
    });

    if (selectedItems.length === 0) {
      Swal.fire('No items selected', 'Please select items to proceed', 'warning');
    } else {
      // Proceed with the selected items
      console.log('Proceed with selected items:', selectedItems);
      // You can send selectedItems to the server or perform the necessary actions
    }
  });


  document.querySelectorAll('.increase, .decrease').forEach(button => {
    button.addEventListener('click', function () {
      const row = this.closest('tr');
      const quantityEl = row.querySelector('.quantity');
      const availableQty = parseInt(row.querySelector('.availQty').textContent);
      const rateEl = row.querySelector('.rateperunit');
      const totalEl = row.querySelector('.totalRate');
      const ratePerUnit = parseFloat(rateEl.textContent.replace('₹', '').trim());
      let quantity = parseInt(quantityEl.textContent);

      if (this.classList.contains('increase')) {
        if (quantity < availableQty) {
          quantity + 1;
        } else {
          Swal.fire('Stock Limit Reached', '', 'info');
        }
      } else if (this.classList.contains('decrease')) {
        if (quantity > 1) {
          quantity - 1;
        } else {
          Swal.fire('Minimum Quantity Reached', '', 'info');
        }
      }

      // Update quantity in the UI
      quantityEl.textContent = quantity;

      // Update the total price
      const total = quantity * ratePerUnit;
      totalEl.textContent = `₹ ${ total.toFixed(2) }`;
    });
  });

  function updateTotal(row, quantity) {
    const ratePerUnit = parseFloat(row.querySelector('.rateperunit').textContent.replace('₹', '').trim());
    const totalRateEl = row.querySelector('.totalRate');
    const total = ratePerUnit * quantity;
    totalRateEl.textContent = `₹ ${ total.toFixed(2) }`;
  }


  document.addEventListener('DOMContentLoaded', () => {
    // Initialize data structure to store row information
    const rowData = [];

    // Store initial data for all rows across all pages
    document.querySelectorAll('tr').forEach((row, index) => {
      const ratePerUnit = parseFloat(row.querySelector('.rateperunit').textContent.replace('₹', '').trim());
      const quantity = parseInt(row.querySelector('.quantity').textContent);

      rowData[index] = {
        ratePerUnit,
        quantity,
      };
    });

    // Function to update the row data
    function updateRowData(index, quantity) {
      rowData[index].quantity = quantity;
    }

    // Function to calculate the grand total across all pages
    function calculateGrandTotal() {
      const grandTotal = rowData.reduce((sum, row) => {
        return sum + row.ratePerUnit * row.quantity;
      }, 0);
      document.getElementById('total-amount').textContent = grandTotal.toFixed(2);
    }

  })





  function removefromCart(id) {
    document.getElementById('removeid').value = id
  }






</script>

<% if (successmessage && successmessage.length>0) { %>
<script>
  Swal.fire({
    text: "<%= successmessage %>",
    icon: "success"
  });
</script>
<% } %>