<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
<link rel="stylesheet" href="/dashboard.css">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
  body {
    font-family: auto;
  }

  .profile-header {
    background-color: #f44336;
    color: white;
    padding: 20px;
    text-align: center;
    position: relative;
  }

  .profile-header .edit-profile {
    position: absolute;
    top: 20px;
    right: 20px;
  }

  .menu {
    background-color: #fff;
    border-right: 1px solid #ddd;
    min-height: 100vh;
    padding: 20px;
  }

  .menu a {
    display: block;
    padding: 10px;
    color: #333;
    text-decoration: none;
  }

  .menu a:hover {
    background-color: #f8f9fa;
    border-radius: 5px;
  }

  .address-card {
    border: 1px solid #ddd;
    border-radius: 5px;
    padding: 15px;
  }

  footer {
    background-color: black;
    color: white;
    padding: 20px 0;
  }

  footer a {
    color: white;
    text-decoration: none;
  }

  body {
    font-family: 'Arial', sans-serif;
    background-color: #f5f6fa;
  }

  .menu {
    height: 100vh;
    background-color: #343a40;
    padding-top: 20px;
    padding-left: 15px;
    border-right: 2px solid #dee2e6;
  }

  .menu a {
    display: block;
    padding: 10px 15px;
    color: #ced4da;
    text-decoration: none;
    margin-bottom: 10px;
    border-radius: 5px;
    transition: background 0.3s, color 0.3s;
  }

  .menu a.cart,
  .menu a:hover {
    background-color: #495057;
    color: #f8f9fa;
  }

  .content-header {
    background-color: #ffffff;
    padding: 20px;
    border-bottom: 2px solid #dee2e6;
  }

  .content-header h1 {
    font-size: 1.8rem;
    color: #495057;
  }

  body {
    background-color: #f5f5f5;
  }

  .cart-table {
    margin-top: 40px;
    background: #ffffff;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    border-radius: 10px;
    padding: 20px;
  }

  .cart-header {
    font-size: 1.8rem;
    font-weight: bold;
    color: #343a40;
  }

  .product-image {
    width: 80px;
    height: 80px;
    object-fit: cover;
    border-radius: 8px;
  }

  .table th,
  .table td {
    vertical-align: middle;
    text-align: center;
  }

  .btn-update {
    background: #0d6efd;
    border: none;
    color: white;
    transition: all 0.3s ease;
  }

  .btn-update:hover {
    background: #0056b3;
  }

  .btn-remove {
    background: #dc3545;
    border: none;
    color: white;
    transition: all 0.3s ease;
  }

  .btn-remove:hover {
    background: #b02a37;
  }

  body {
    background-color: #f8f9fa;
  }


  .cart-container {
    background: #fff;
    border-radius: 10px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    padding: 30px;
  }

  .cart-header {
    font-size: 2rem;
    font-weight: bold;
    text-align: center;
    margin-bottom: 20px;
    color: #343a40;
  }

  .table th,
  .table td {
    text-align: center;
    vertical-align: middle;
  }

  .table th {
    background-color: #6c757d;
    color: white;
  }

  .btn-update,
  .btn-remove,
  .btn-checkout {
    transition: all 0.3s ease;
  }

  .btn-update:hover {
    background-color: #0056b3;
  }

  .btn-remove:hover {
    background-color: #b02a37;
  }
</style>
<%- include('partials/profileheadr') %>

<div class="row">
  <div class="col-md-2 menu">
    <%- include('partials/profileside') %>
  </div>

  <!-- Main Content -->
  <div class="container cart-container col-md-10">
    <h2 class="cart-header">Your Shopping Cart</h2>
    <p class=""><%= userid %></p>

    <table class="table table-bordered " style="margin-left: -119px;width: 1120px;">
      <thead>
        <tr>
          <th class="fs-5">Select</th>
          <th class="fs-5">Image</th>
          <th class="fs-5">Product Name</th>
          <th class="fs-5">Variant</th>
          <th class="fs-5">Hotel</th>
          <th class="fs-5">Rate</th>
          <th class="fs-5">Quantity</th>
          <th class="fs-5">Total</th>
          <th class="fs-5">Actions</th>
        </tr>
      </thead>
      <tbody>
        <% carts.forEach((element, index) => { %>
        <tr>
          <td>
            <input type="checkbox" class="form-check-input check-cart" data-index="<%= index %>"
              data-id="<%= element._id %>">
          </td>
          <td>
            <img src="<%= element.rateDetails.images[0] %>" class="rounded" alt="Product" style="width:100px">
          </td>
          <td class="fs-6"><%= element.foodDetails.foodname %></td>
          <td class="fs-6"><%= element.varientDetails[0].varientname %></td>
          <td class="fs-6"><%= element.hotelDetails[0].hotelname %></td>
          <td class="fs-6 rateperunit">₹ <%= element.rateDetails.rate +
              element.rateDetails.rate * element.rateDetails.gst_per / 100 +
              element.rateDetails.rate * element.rateDetails.packing_per / 100 +
              element.rateDetails.rate * element.rateDetails.delivery_per / 100 %>
          </td>
          <td>
            <button class="decrease btn btn-secondary">-</button>
            <span class="quantity"><%= element.number %></span>
            <button class="increase btn btn-secondary">+</button>
          </td>
          <td class="fs-6 totalRate">
          </td>
          <td>
            <button class="btn btn-danger btn-sm btn-remove" data-bs-toggle="modal" data-bs-target="#removefromCart"
              onclick="removefromCart('<%= element._id %>')">Remove</button>
          </td>
        </tr>
        <% }) %>
        <% if (carts.length == 0) { %>
        <h4 style="margin-top: 7rem;text-align: center;">No Data Found</h4>
        <% } else { %>
 
          <tr <% if (selectedpage!==totalPages) { %>
            class="d-none"  
          <% } %>>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td>Total Amount:</td>
            <td><span class="subtotal">₹ <span id="total-amount"></span></span></td>
            <td>
              <form action="">
                <button id="proceed" class="btn btn-primary">Proceed with Selected</button>
              </form>
            </td>
          </tr>   
   
        <% } %>
      </tbody>
    </table>
    <div style="margin-top: 600px;margin-left: 500px;">
      <% for (let i = 1; i <= totalPages; i++) { %>
        <button  onclick="loadPage('<%= i %>')" class="btn <%= i === selectedpage ? 'btn-danger' : 'btn-success' %>">
           <%= i %>
        </button>
      <% } %>

    </div>
 
  </div>
</div>

<!-- remove modal -->
<div class="modal fade" id="removefromCart" tabindex="-1" aria-labelledby="addBannerModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered custom-modal-width">
    <div class="modal-content">
      <form action="/user/removeCart" method="post">
        <input type="text" id="removeid" name="cartid">
        <div class="modal-body">
          <p>Do you want to Remove the product from cart?</p>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
          <button type="submit" class="btn btn-success">Yes</button>
        </div>
      </form>

    </div>
  </div>
</div>

<%- include('partials/userfooter') %>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>



   let debounceTimer;

function searchItem(value) {
   clearTimeout(debounceTimer);
   debounceTimer = setTimeout(() => {
      const currentPage = 1; // Reset to the first page for a new search
      window.location.href = `/user/cart?pagenumber=${currentPage}&product=${encodeURIComponent(value)}`;
   }, 700); // Adjust delay (in milliseconds) as needed
}

function loadPage(pageNumber) {
   const searchValue = document.getElementById('searchInput').value || '';
   window.location.href = `/user/cart?pagenumber=${pageNumber}&product=${encodeURIComponent(searchValue)}`;
}






  document.querySelector('table').addEventListener('click', function (e) {
  const target = e.target;

  // Check if the clicked element is an increase or decrease button
  if (target.classList.contains('increase') || target.classList.contains('decrease')) {
    const row = target.closest('tr'); // Find the closest table row
    const quantitySpan = row.querySelector('.quantity'); // Get the quantity element
    const ratePerUnit = parseFloat(row.querySelector('.rateperunit').textContent.replace('₹', '').trim()); // Get the rate per unit
    const totalRateSpan = row.querySelector('.totalRate'); // Get the total rate element

    let quantity = parseInt(quantitySpan.textContent); // Parse the quantity value

    // Increment or decrement the quantity
    if (target.classList.contains('increase')) {
      quantity++;
    } else if (target.classList.contains('decrease') && quantity > 1) {
      quantity--;
    }

    // Update the quantity in the UI
    quantitySpan.textContent = quantity;

    // Calculate and update the total rate
    const totalRate = ratePerUnit * quantity;
    totalRateSpan.textContent = '₹ ' + totalRate.toFixed(2); // Format the total rate with ₹ symbol
  }
});



document.querySelectorAll('.increase, .decrease').forEach(button => {
  button.addEventListener('click', function () {
    const row = this.closest('tr');
    const quantityEl = row.querySelector('.quantity');
    let quantity = parseInt(quantityEl.textContent);

    if (this.classList.contains('increase')) {
      quantity++;
    } else if (this.classList.contains('decrease') && quantity > 1) {
      quantity--;
    }

    quantityEl.textContent = quantity;

    // Calculate the total rate for the row
    const ratePerUnit = parseFloat(row.querySelector('.rateperunit').innerText.replace('₹', '').trim());
    const totalRate = (ratePerUnit * quantity).toFixed(2);
    row.querySelector('.totalRate').innerText = `₹ ${totalRate}`;

    updateTotalAmount(); // Update the total amount
  });
});


// Initial calculation for all rows on page load
document.addEventListener('DOMContentLoaded', function () {
  const ratePerUnitElements = document.getElementsByClassName('rateperunit');
  const quantityElements = document.getElementsByClassName('quantity');
  const totalRateElements = document.getElementsByClassName('totalRate');

  for (let i = 0; i < ratePerUnitElements.length; i++) {
    const ratePerUnit = parseFloat(ratePerUnitElements[i].textContent.replace('₹', '').trim());
    const quantity = parseInt(quantityElements[i].textContent);
    const totalRate = ratePerUnit * quantity;

    totalRateElements[i].textContent = '₹ ' + totalRate.toFixed(2); // Initialize total rate with ₹ symbol
  }
});




  document.getElementById('proceed').addEventListener('click', function (event) {
    event.preventDefault(); // Prevent form submission

    const selectedItems = [];
    let cartIDS = []
    document.querySelectorAll('.check-cart').forEach((checkbox, index) => {
      if (checkbox.checked) {
        selectedItems.push(index); // Collect selected item indices (or any identifying data)
        cartIDS.push(checkbox.getAttribute('data-id'))
      }
    });


    if (selectedItems.length === 0) {
      Swal.fire({
        icon: 'error',
        title: 'No Items Selected',
        text: 'Please select at least one item to proceed.',
      });
      return;
    }

    // Show confirmation alert
    Swal.fire({
      title: 'Confirm Your Order',
      text: 'Do you want to proceed with the selected items?',
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Yes, Proceed',
      cancelButtonText: 'Cancel',
    }).then((result) => {
      if (result.isConfirmed) {
        const userid = "<%= userid %>"
        // Redirect or handle form submission here
        window.location.href = `/user/confirmorder?userid=${ userid }&cartIDS=${ cartIDS }`;
      }
    });
  });



  document.addEventListener('DOMContentLoaded', function () {
    // Load selected items from local storage
    loadSelectedItems();

    const ratePerUnitElements = document.getElementsByClassName('rateperunit');
    const quantityElements = document.getElementsByClassName('quantity');
    const totalRateElements = document.getElementsByClassName('totalRate');

    // Initialize total rate for each item
    for (let i = 0; i < ratePerUnitElements.length; i++) {
        const ratePerUnit = parseFloat(ratePerUnitElements[i].textContent.replace('₹', '').trim());
        const quantity = parseInt(quantityElements[i].textContent);
        const totalRate = ratePerUnit * quantity;

        totalRateElements[i].textContent = '₹ ' + totalRate.toFixed(2); // Initialize total rate with ₹ symbol
    }

    // Update total amount based on selected items
    updateTotalAmount();

    // Initialize pagination and determine if the current page is the last one
    const itemsPerPage = 10;  // Example number of items per page
    const totalItems = document.querySelectorAll('.cart-item').length;  // Total number of items in cart
    const totalPages = Math.ceil(totalItems / itemsPerPage);  // Calculate total number of pages

    // Assuming you have a way to get the current page (this can be set dynamically)
    const currentPage = getCurrentPage(); // You can implement getCurrentPage() to fetch the current page

    // Show/hide the total amount row based on the current page
    if (currentPage === totalPages) {
        document.getElementById('total-row').style.display = 'table-row'; // Show total row on last page
    } else {
        document.getElementById('total-row').style.display = 'none'; // Hide total row on other pages
    }
});

// Event listener for checking/unchecking items
document.querySelector('table').addEventListener('click', function (e) {
    const target = e.target;

    // Check if the clicked element is a checkbox
    if (target.classList.contains('check-cart')) {
        const index = target.getAttribute('data-index');
        const cartID = target.getAttribute('data-id');

        // Get current selections from local storage
        let selectedItems = JSON.parse(localStorage.getItem('selectedItems')) || [];

        // Add or remove the selected item from the array
        if (target.checked) {
            selectedItems.push(cartID);
        } else {
            selectedItems = selectedItems.filter(item => item !== cartID);
        }

        // Store updated selections in local storage
        localStorage.setItem('selectedItems', JSON.stringify(selectedItems));

        // Update total amount based on selected items
        updateTotalAmount();
    }
});

// Function to load previously selected items from local storage
function loadSelectedItems() {
    const selectedItems = JSON.parse(localStorage.getItem('selectedItems')) || [];

    // Check each checkbox if it matches the stored selected items
    document.querySelectorAll('.check-cart').forEach((checkbox) => {
        if (selectedItems.includes(checkbox.getAttribute('data-id'))) {
            checkbox.checked = true;
        }
    });
}

// Function to calculate and update total amount for selected items
function updateTotalAmount() {
  const selectedItems = JSON.parse(localStorage.getItem('selectedItems')) || {};
  let totalAmount = 0;

  document.querySelectorAll('.check-cart').forEach(checkbox => {
    if (checkbox.checked) {
      const row = checkbox.closest('tr');
      const itemTotal = parseFloat(row.querySelector('.totalRate').innerText.replace('₹', '').trim());
      totalAmount += itemTotal;
    }
  });

  document.getElementById('total-amount').innerText = totalAmount.toFixed(2); // Update UI
}


// Function to get the current page number (implement your own logic for pagination)
function getCurrentPage() {
    // For example, this can be fetched from the URL or page state
    return parseInt(new URLSearchParams(window.location.search).get('page')) || 1; // Default to page 1 if not found
}

// Proceed with selected items (on button click)
document.getElementById('proceed').addEventListener('click', function (event) {
    event.preventDefault(); // Prevent form submission

    const selectedItems = [];
    document.querySelectorAll('.check-cart').forEach((checkbox) => {
        if (checkbox.checked) {
            selectedItems.push(checkbox.getAttribute('data-id'));
        }
    });

    if (selectedItems.length === 0) {
        Swal.fire('No items selected', 'Please select items to proceed', 'warning');
    } else {
        // Proceed with the selected items
        console.log('Proceed with selected items:', selectedItems);
        // You can send selectedItems to the server or perform the necessary actions
    }
});






// Proceed with selected items (on button click)
document.getElementById('proceed').addEventListener('click', function (event) {
    event.preventDefault(); // Prevent form submission

    const selectedItems = [];
    document.querySelectorAll('.check-cart').forEach((checkbox) => {
        if (checkbox.checked) {
            selectedItems.push(checkbox.getAttribute('data-id'));
        }
    });

    if (selectedItems.length === 0) {
        Swal.fire('No items selected', 'Please select items to proceed', 'warning');
    } else {
        // Proceed with the selected items
        console.log('Proceed with selected items:', selectedItems);
        // You can send selectedItems to the server or perform the necessary actions
    }
});


document.querySelectorAll('.check-cart').forEach(checkbox => {
  checkbox.addEventListener('change', function () {
    const itemId = this.dataset.id;
    let selectedItems = JSON.parse(localStorage.getItem('selectedItems')) || {};

    if (this.checked) {
      selectedItems[itemId] = true; // Mark item as selected
    } else {
      delete selectedItems[itemId]; // Remove item from selected
    }

    localStorage.setItem('selectedItems', JSON.stringify(selectedItems));
    updateTotalAmount(); // Update the total amount
  });
});




document.addEventListener('DOMContentLoaded', () => {
  // Initialize data structure to store row information
  const rowData = [];

  // Store initial data for all rows across all pages
  document.querySelectorAll('tr').forEach((row, index) => {
    const ratePerUnit = parseFloat(row.querySelector('.rateperunit').textContent.replace('₹', '').trim());
    const quantity = parseInt(row.querySelector('.quantity').textContent);
    rowData[index] = {
      ratePerUnit,
      quantity,
    };
  });

  // Function to update the row data
  function updateRowData(index, quantity) {
    rowData[index].quantity = quantity;
  }

  // Function to calculate the grand total across all pages
  function calculateGrandTotal() {
    const grandTotal = rowData.reduce((sum, row) => {
      return sum + row.ratePerUnit * row.quantity;
    }, 0);
    document.getElementById('total-amount').textContent = grandTotal.toFixed(2);
  }

  // Add event listeners to increase and decrease buttons
  document.querySelectorAll('.increase').forEach((button, index) => {
    button.addEventListener('click', () => {
      const row = button.closest('tr');
      const quantityElement = row.querySelector('.quantity');
      let quantity = parseInt(quantityElement.textContent);
      quantity += 1;
      quantityElement.textContent = quantity;
      updateRowData(index, quantity);
      calculateGrandTotal();
    });
  });

  document.querySelectorAll('.decrease').forEach((button, index) => {
    button.addEventListener('click', () => {
      const row = button.closest('tr');
      const quantityElement = row.querySelector('.quantity');
      let quantity = parseInt(quantityElement.textContent);
      if (quantity > 1) {
        quantity -= 1;
        quantityElement.textContent = quantity;
        updateRowData(index, quantity);
        calculateGrandTotal();
      }
    });
  });

  // Initial calculation of the grand total
  calculateGrandTotal();
});




function removefromCart(id){
  document.getElementById('removeid').value=id
}






</script>

<% if (successmessage && successmessage.length>0) { %>
<script>
  Swal.fire({
    text: "<%= successmessage %>",
    icon: "success"
  });
</script>
<% } %>